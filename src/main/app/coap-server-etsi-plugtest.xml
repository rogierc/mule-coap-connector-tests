<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:coap-client="http://www.mulesoft.org/schema/mule/coap-client" xmlns:coap-server="http://www.mulesoft.org/schema/mule/coap-server" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/coap-server http://www.teslanet.nl/schema/mule/coap-server/1.0/mule-coap-server.xsd
http://www.mulesoft.org/schema/mule/coap-client http://www.teslanet.nl/schema/mule/coap-client/1.0/mule-coap-client.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd">
    <coap-server:config name="CoAP_ETSI_Plugtest_Server" doc:name="CoAP Server: Server Configuration">
        <coap-server:resources>
            <coap-server:resource name="test" get="true" put="true" delete="true" post="true"/>
            <coap-server:resource name="seg1" get="true">
                <coap-server:resources>
                    <coap-server:resource name="seg2" get="true">
                        <coap-server:resources>
                            <coap-server:resource name="seg3" get="true"/>
                        </coap-server:resources>
                    </coap-server:resource>
                </coap-server:resources>
            </coap-server:resource>
            <coap-server:resource name="location-query" post="true" />
            <coap-server:resource name="query" get="true"/>
            <coap-server:resource name="separate" get="true" earlyAck="true"/>
            <coap-server:resource name="large" get="true" sz="2048"/>
            <coap-server:resource name="large_update" get="true" put="true" sz="2048"/>
            <coap-server:resource name="large_create" get="true" post="true" sz="2048"/>
            <coap-server:resource name="multi-format" get="true"/>
            <coap-server:resource name="validate" get="true" put="true"/>
            <coap-server:resource name="create1" get="true" put="true" delete="true"/>
            <coap-server:resource name="obs" get="true" observable="true"/>
            <coap-server:resource name="link1" title="Link test resource" ifdesc="If1" rt="Type1, Type2"/>
            <coap-server:resource name="link3" title="Link test resource" ifdesc="foo" rt="Type1, Type3"/>
            <coap-server:resource name="link2" title="Link test resource" ifdesc="If2" rt="Type2, Type3"/>
        </coap-server:resources>
    </coap-server:config>
    
    <flow name="coap-server-etsi-plugtest-test">
        <coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/test" doc:name="CoAP ETSI Plugtest listen /test"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>

		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.method == 'GET']">
                <set-payload value="TD_COAP_CORE_01/05/10 received GET." encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_01 response payload"/>
				
			</when>

			<when expression="#[ flowVars.method == 'DELETE']">
                <set-payload value="TD_COAP_CORE_02/06 received DELETE" encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_02 response payload"/>
				
			</when>

			<when expression="#[ flowVars.method == 'PUT']">
                <choice doc:name="check content format">
                    <when expression="#[message.inboundProperties.'coap.opt.content_format' == 0 ]">
                        <set-payload value="TD_COAP_CORE_03/07 received PUT" encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_03 response payload"/>
                        <set-property propertyName="coap.response.code" value="CHANGED" doc:name="CHANGED"/>
                    </when>
                    <otherwise>
                        <set-payload value="Expected text/plain" doc:name="Expected text/plain"/>
                        <set-property propertyName="coap.response.code" value="NOT_ACCEPTABLE" doc:name="NOT_ACCEPTABLE"/>
                    </otherwise>
                </choice>
				
			</when>

			<when expression="#[ flowVars.method == 'POST']">
                <!-- <choice doc:name="check content format">
                    <when expression="#[message.inboundProperties.'coap.opt.content_format' == 0 ]">-->
                        <set-payload value="TD_COAP_CORE_04/08/18 received POST" encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_04 response payload"/>
                        <set-property propertyName="coap.opt.location_path" value="/location1/location2/location3" doc:name="set Location-Path"/>
                        <set-property propertyName="coap.response.code" value="CREATED" doc:name="CREATED"/>
                <coap-server:add-resource config-ref="CoAP_ETSI_Plugtest_Server" uri="/location1" doc:name="create location1" delete="true" get="true"/>
                <coap-server:add-resource config-ref="CoAP_ETSI_Plugtest_Server" uri="/location1/location2" doc:name="create location2" delete="true" get="true"/>
                <coap-server:add-resource config-ref="CoAP_ETSI_Plugtest_Server" uri="/location1/location2/location3" doc:name="create location3" delete="true" get="true"/>
                    <!--  </when>
                    <otherwise>
                        <set-payload value="Expected text/plain" doc:name="Expected text/plain"/>
                        <set-property propertyName="coap.response.code" value="NOT_ACCEPTABLE" doc:name="NOT_ACCEPTABLE"/>
                    </otherwise>
                </choice>-->
			</when>			
			
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    
    <flow name="coap-server-etsi-plugtest-separate">
        <coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/separate" doc:name="CoAP ETSI Plugtest listen /separate"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>

		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.method == 'GET']">
                <set-payload value="TD_COAP_CORE_09/11/17 received GET." encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_01 response payload"/>
				
			</when>

			<when expression="#[ flowVars.method == 'DELETE']">
                <set-payload value="TD_COAP_CORE_02/06 received DELETE" encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_02 response payload"/>
				
			</when>

			<when expression="#[ flowVars.method == 'PUT']">
                <choice doc:name="check content format">
                    <when expression="#[message.inboundProperties.'coap.opt.content_format' == 0 ]">
                        <set-payload value="TD_COAP_CORE_03/07 received PUT" encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_03 response payload"/>
                        <set-property propertyName="coap.response.code" value="CHANGED" doc:name="CHANGED"/>
                    </when>
                    <otherwise>
                        <set-payload value="Expected text/plain" doc:name="Expected text/plain"/>
                        <set-property propertyName="coap.response.code" value="NOT_ACCEPTABLE" doc:name="NOT_ACCEPTABLE"/>
                    </otherwise>
                </choice>
				
			</when>

			<when expression="#[ flowVars.method == 'POST']">
                <choice doc:name="check content format">
                    <when expression="#[message.inboundProperties.'coap.opt.content_format' == 0 ]">
                        <set-payload value="TD_COAP_CORE_04/08 received POST" encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_04 response payload"/>
                        <set-property propertyName="coap.response.code" value="CREATED" doc:name="CREATED"/>
                    </when>
                    <otherwise>
                        <set-payload value="Expected text/plain" doc:name="Expected text/plain"/>
                        <set-property propertyName="coap.response.code" value="NOT_ACCEPTABLE" doc:name="NOT_ACCEPTABLE"/>
                    </otherwise>
                </choice>
			</when>			
			
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>

    <flow name="coap-server-etsi-plugtest-seg1-3">
        <coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/seg1/seg2/seg3" doc:name="CoAP ETSI Plugtest listen /seg1/seg2/seg3"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>

		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.method == 'GET']">
                <set-payload value="TD_COAP_CORE_13 received GET." encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_13 response payload"/>
				
			</when>
			
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    
    <flow name="coap-server-etsi-plugtest-location-query">
        <coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/location-query" doc:name="CoAP ETSI Plugtest listen /location-query"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>

		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.method == 'POST']">
                <set-payload value="TD_COAP_CORE_19 received POST: #[payload]" encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_19 response payload"/>
                <set-property propertyName="coap.opt.location_query" value="first=1&amp;second=2" doc:name="set Location-Query"/>
                <set-property propertyName="coap.response.code" value="CREATED" doc:name="CREATED"/>
				
			</when>
			
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    
    <flow name="coap-server-etsi-plugtest-query">
        <coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/query" doc:name="CoAP ETSI Plugtest listen /query"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>

		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.method == 'GET']">
                <set-payload value="TD_COAP_CORE_14 received GET with query: #[message.inboundProperties.'coap.opt.uri_query']" encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_14 response payload"/>
				
			</when>
			
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <!--  TODO : test composite source -->
    <flow name="coap-server-etsi-plugtest-location1-3">
      	<coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/location1/*" doc:name="CoAP ETSI Plugtest listen /location1/*"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>

		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.method == 'GET']">
                <set-payload value="TD_COAP_CORE_xx received GET." encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_13 response payload"/>
				
			</when>
			
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow> 
    
    <flow name="coap-server-etsi-plugtest-multi-format">
      	<coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/multi-format" doc:name="CoAP ETSI Plugtest listen /multi-format"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>
		<set-variable variableName="accept" value="#[message.inboundProperties['coap.opt.accept'] ]"
			doc:name="set accept"/>

		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.method == 'GET' &amp;&amp; flowVars.accept == 0 ]">
                <set-payload value="TD_COAP_CORE_20 received GET for text/plain." encoding="UTF-8" mimeType="text/plain" doc:name="TD_COAP_CORE_20 plain response payload"/>	
			</when>			
			<when expression="#[ flowVars.method == 'GET' &amp;&amp; flowVars.accept == 41 ]">
                <set-payload value="&lt;TD_COAP_CORE_20 received=&quot;GET&quot; accept=&quot;application/xml&quot;/&gt;" encoding="UTF-8" mimeType="application/xml" doc:name="TD_COAP_CORE_20 xml response payload"/>
			</when>		
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    
    <flow name="coap-server-etsi-plugtest-validate">
      	<coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/validate" doc:name="CoAP ETSI Plugtest listen /validate"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>
		<set-variable variableName="etag" value="#[ message.inboundProperties.'coap.opt.etag.list' == empty ? null : message.inboundProperties.'coap.opt.etag.list'.getFirst()]"
			doc:name="set etag"/>
		<set-variable variableName="if_match" value="#[ message.inboundProperties.'coap.opt.if_match.list' == empty ? null : message.inboundProperties.'coap.opt.if_match.list'.getFirst()]"
			doc:name="set etag"/>
        <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getETag('validate_etag')]" doc:name="get actual etag"/>
        <set-variable variableName="actual_payload" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getPayload('validate_etag')]" doc:name="get actual payload"/>
			
		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.method == 'GET' &amp;&amp; flowVars.etag == empty ]">
                <set-payload value="#[ flowVars.actual_payload]" encoding="UTF-8" mimeType="text/plain" doc:name="set response payload"/>
	
			</when>			
			<when expression="#[ flowVars.method == 'GET' &amp;&amp; flowVars.etag != empty  ]">
                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getETag('validate_etag')]" doc:name="get actual etag"/>
                <choice doc:name="check etag is valid">
                    <when expression="#[flowVars.actual_etag.equals( flowVars.etag )]">
                        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Empty Payload"/>
                        <set-property propertyName="coap.response.code" value="VALID" doc:name="set response code to Valid"/>
                        <set-variable variableName="new_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getNewETag('validate_etag')]" doc:name="set new etag for next call"/>
                    </when>
                    <otherwise>
                		<set-payload value="#[ flowVars.actual_payload]" encoding="UTF-8" mimeType="text/plain" doc:name="set response payload"/>
                    </otherwise>
                </choice>
	
			</when>		
			<when expression="#[ flowVars.method == 'PUT' &amp;&amp; flowVars.if_match == empty ]">
                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getNewETag('validate_etag')]" doc:name="get actual etag"/>
        		<set-variable variableName="actual_payload" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.setPayload('validate_etag', payload)]" doc:name="get actual payload"/>
	
			</when>			
			<when expression="#[ flowVars.method == 'PUT' &amp;&amp; flowVars.if_match != empty  ]">
                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getETag('validate_etag')]" doc:name="get actual etag"/>
                <choice doc:name="check if_match">
                    <when expression="#[flowVars.if_match.equals( flowVars.actual_etag )]">
                        <set-property propertyName="coap.response.code" value="CHANGED" doc:name="set response code to Valid"/>
		                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getNewETag('validate_etag')]" doc:name="get actual etag"/>
		        		<set-variable variableName="actual_payload" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.setPayload('validate_etag', payload)]" doc:name="get actual payload"/>
                        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Empty Payload"/>
                    </when>
                    <otherwise>
                        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Empty Payload"/>
                        <set-property propertyName="coap.response.code" value="PRECONDITION_FAILED" doc:name="set response code to PRECONDITION_FAILED"/>
                    </otherwise>
                </choice>
	
			</when>				
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <set-property propertyName="coap.opt.etag.list" value="#[flowVars.actual_etag]" doc:name="set coap.opt.etag.list"/>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    
    <flow name="coap-server-etsi-plugtest-root">
      	<coap-server:listen config-ref="CoAP_ETSI_Plugtest_Server" uri="/*" doc:name="CoAP ETSI Plugtest listen /*"/>
        <logger level="INFO" doc:name="Logger"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        
        <set-variable variableName="method"
			value="#[ message.inboundProperties['coap.request.code']]" doc:name="set method"/>
		<set-variable variableName="uri" value="#[message.inboundProperties['coap.request.uri'] ]"
			doc:name="set uri"/>
		<set-variable variableName="etag" value="#[ message.inboundProperties.'coap.opt.etag.list' == empty ? null : message.inboundProperties.'coap.opt.etag.list'.getFirst()]"
			doc:name="set etag"/>
		<set-variable variableName="if_match" value="#[ message.inboundProperties.'coap.opt.if_match.list' == empty ? null : message.inboundProperties.'coap.opt.if_match.list'.getFirst()]"
			doc:name="set etag"/>
		<set-variable variableName="if_none_match" value="#[ message.inboundProperties.'coap.opt.if_none_match' == empty ? null : message.inboundProperties.'coap.opt.if_none_match']"
			doc:name="set etag"/>
			
		<choice doc:name="Choice request code">
			<when expression="#[ flowVars.uri == '/create1' &amp;&amp; flowVars.method == 'GET' &amp;&amp; flowVars.etag == empty ]">
                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getETag('create1_etag')]" doc:name="get actual etag"/>
        		<set-variable variableName="actual_payload" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getPayload('create1_etag')]" doc:name="get actual payload"/>
        		<set-property propertyName="coap.opt.etag.list" value="#[flowVars.actual_etag]" doc:name="set coap.opt.etag.list"/>
                <set-payload value="#[flowVars.actual_payload]" encoding="UTF-8" mimeType="text/plain" doc:name="set response payload"/>
	
			</when>			
			<when expression="#[ flowVars.uri == '/create1' &amp;&amp; flowVars.method == 'GET' &amp;&amp; flowVars.etag != empty  ]">
                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getETag('create1_etag')]" doc:name="get actual etag"/>
        		<set-variable variableName="actual_payload" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getPayload('create1_etag')]" doc:name="get actual payload"/>
        		<set-property propertyName="coap.opt.etag.list" value="#[flowVars.actual_etag]" doc:name="set coap.opt.etag.list"/>
                <choice doc:name="check etag is valid">
                    <when expression="#[flowVars.actual_etag.equals( flowVars.etag )]">
                        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Empty Payload"/>
                        <set-property propertyName="coap.response.code" value="VALID" doc:name="set response code to Valid"/>
                    </when>
                    <otherwise>
                		<set-payload value="#[flowVars.actual_payload]" encoding="UTF-8" mimeType="text/plain" doc:name="set response payload"/>
                    </otherwise>
                </choice>
	
			</when>		
			<when expression="#[ flowVars.uri == '/create1' &amp;&amp; flowVars.method == 'PUT' &amp;&amp; flowVars.if_none_match == empty ]">
                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getNewETag('create1_etag')]" doc:name="get actual etag"/>
        		<set-variable variableName="actual_payload" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.setPayload('create1_etag', payload)]" doc:name="get actual payload"/>
                <coap-server:add-resource config-ref="CoAP_ETSI_Plugtest_Server" uri="/create1" delete="true" get="true" put="true" doc:name="Add /create1"/>
	
			</when>			
			<when expression="#[ flowVars.uri == '/create1' &amp;&amp; flowVars.method == 'PUT' &amp;&amp; flowVars.if_none_match != empty  ]">
                <enricher target="#[flowVars.exists]" doc:name="Message Enricher">
                    <coap-server:resource-exists config-ref="CoAP_ETSI_Plugtest_Server" uri="/create1" doc:name="CoAP Server"/>
                </enricher>
                <choice doc:name="check if exist and if_none_match">
                    <when expression="#[flowVars.exists == false || flowVars.if_none_match == false ]">
                        <set-property propertyName="coap.response.code" value="CREATED" doc:name="set response code to CREATED"/>
		                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getNewETag('validate_etag')]" doc:name="get actual etag"/>
		        		<set-variable variableName="actual_payload" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.setPayload('validate_etag', payload)]" doc:name="get actual payload"/>
                        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Empty Payload"/>
                        <coap-server:add-resource config-ref="CoAP_ETSI_Plugtest_Server" uri="/create1" delete="true" get="true" put="true" doc:name="Add /create1"/>
                    </when>
                    <otherwise>
                        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Empty Payload"/>
                        <set-property propertyName="coap.response.code" value="PRECONDITION_FAILED" doc:name="set response code to PRECONDITION_FAILED"/>
                    </otherwise>
                </choice>
	
			</when>	
			<when expression="#[ flowVars.uri == '/create1' &amp;&amp; flowVars.method == 'DELETE' ]">
                <set-variable variableName="actual_etag" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getNewETag('create1_etag')]" doc:name="get actual etag"/>
        		<set-variable variableName="actual_payload" value="#[nl.teslanet.mule.transport.coap.test.ETagMemoryStore.getPayload('create1_etag')]" doc:name="get actual payload"/>
	            <set-payload value="#[NullPayload.getInstance()]" encoding="UTF-8" mimeType="text/plain" doc:name="NullPayload"/>
                <coap-server:remove-resource config-ref="CoAP_ETSI_Plugtest_Server" uri="/create1" doc:name="Delete /create1"/>
	
			</when>				
			<otherwise>
                <set-payload value="Unexpected request" encoding="UTF-8" mimeType="text/plain" doc:name="Unexpected method"/>
                <set-property propertyName="coap.response.code" value="NOT_IMPLEMENTED" doc:name="NOT_IMPLEMENTED"/>       				
			</otherwise>
		</choice>
        <logger message="#[payload]" level="INFO" doc:name="Log payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
</mule>
